//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "product")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub product_id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub image: Option<String>,
    pub count: i32,
    pub price: Decimal,
    pub category: String,
    #[sea_orm(ignore)]
    #[sea_orm(skip)]
    pub status: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn is_available(&self, count: Option<i32>) -> bool {
        let count = count.unwrap_or(1);

        self.count - count >= 0
    }
}
